<h1>Scheduled Tasks</h1>

<% if can? :create, ScheduledTask %>
<ul class="button-group round">
	<li><%= link_to 'New Scheduled Task', new_admin_scheduled_task_path, class: "small success button" %></li>
</ul>
<% end %>

<div class="row">
  <div class="small-12 medium-8 columns">
	<% if @scheduled_tasks.size > 0 %>
	  <h3>Scheduled</h3>
	  <table class="data" width="100%">
	    <thead>
	      <tr>
		<th>Perform At</th>
		<th>Object</th>
		<th>Actions</th>
		<th>Status</th>
	      </tr>
	    </thead>
	    <tbody>
	    <% @scheduled_tasks.each do |scheduled_task| %>
	      <tr>
		<td><b><%= link_to l(scheduled_task.perform_at), [:admin, scheduled_task] %></b></td>
		<td>
		  <%= scheduled_task.schedulable_type %>:
			<%= scheduled_task.schedulable.respond_to?(:name) ? scheduled_task.schedulable.name : scheduled_task.schedulable_id %>
		</td>
		<td><%= scheduled_task.scheduled_task_actions.size %></td>
		<td><%= scheduled_task.status %></td>
	      </tr>
	    <% end %>
	    </tbody>
	  </table>
	<% else %>
	  <p><em>No upcoming tasks found.</em></p>
	<% end %>
	  
	<% if @recent_tasks.size > 0 %>
	  <h3>Recently Ended</h3>
	  <table class="data" width="100%">
	    <thead>
	      <tr>
		<th>Perform At</th>
		<th>Object</th>
		<th>Actions</th>
		<th>Status</th>
	      </tr>
	    </thead>
	    <tbody>
	    <% @recent_tasks.each do |scheduled_task| %>
	      <tr>
		<td><b><%= link_to l(scheduled_task.perform_at), [:admin, scheduled_task] %></b></td>
		<td>
		  <%= scheduled_task.schedulable_type %>:
			<%= scheduled_task.schedulable.respond_to?(:name) ? scheduled_task.schedulable.name : scheduled_task.schedulable_id %>
		</td>
		<td><%= scheduled_task.scheduled_task_actions.size %></td>
		<td><%= scheduled_task.status %></td>
	      </tr>
	    <% end %>
	    </tbody>
	  </table>
	<% else %>
	  <p><em>No recent tasks found.</em></p>
	<% end %>
  </div>
  <div class="small-12 medium-4 columns">
	  <h3>Notes about scheduled tasks</h3>
	  <p>The basic use-case for scheduled tasks is launching a new product.
	  This can be done by setting the "product_status_id" to change to
	  the "In Production" value at a given time. No more waiting up until
	  midnight. But you can also schedule pricing changes and lots of
	  other things.</p>
	  <p>You'll notice that the attributes to be scheduled look like
	  database field names. They are. That's how this system is super
	  flexible. You may need to hunt through the list of attributes to find
	  the field you want to change. <em>Hint: usually a field ending with "_id"
		  indicates it is related to some other database record. So
		  "product_status_id" refers to Product Status and "parent_id"
		  refers to that object's parent object.</em></p>
	  <p><strong>Tasks run according to <%= Rails.configuration.time_zone %>.</strong>
	  This is due to the original application being coded in Salt Lake City.
	  Changing that configuration now <em>could</em> cause issues elsewhere.
	  If this becomes a problem, we can look into altering the configuration.
	  For now, adjust your task schedules accordingly.
	  </p>

	  <p><strong>Task runners on the server run every 5 minutes.</strong>
	  While you can schedule your task down to the minute, the servers
	  only check for tasks every 5 minutes and run any tasks that had
	  been scheduled since the last run. If we need more precise scheduling,
	  we can look into that as needed.</p>

	  <p><strong>Schedulable objects are limited.</strong> As of now, the
	  only types of objects that can have scheduled changes are:
	  <%= ScheduledTask.schedulable_options.map{|o| o[0]}.join(", ") %>. More can be added
	  as needed by altering: <pre>ScheduledTask#schedulable_options</pre></p>

	  <p><strong>Tasks can alter an object--not create one.</strong>
	  Currently tasks can only change field values for an existing object
	  in the database. So, adding a product to a new family, for example,
	  is not possible because that creates a new record.</p>

	</div>
</div>
