# Martin forwarder
server {
  listen 80;
  server_name martin.com;
  return 301 $scheme://www.martin.com$request_uri;
}

# New martin site
server {
  listen 80;
  server_name martin.hprosandbox.com;
  server_name www.martin.com;
  include "/etc/nginx/security.conf";
  root /var/www/brandsites/current/public;
  access_log  /var/log/nginx/martin-access.log;
  error_log /var/log/nginx/martin-error.log;
  sendfile on;

  location = /favicon.ico {
    alias /var/www/brandsites/current/public/martin.ico;
  }
  location = /logo.png {
    proxy_pass http://d92e2d4def4ad9ded9c8-e33f4b22204b900070d3db62d0c33a2c.r80.cf2.rackcdn.com/martin.png;
  }

  ################################################
  # When going live, get rid of this block and replace it with:
  # include "/etc/nginx/common.conf";
  #
  # Common to most all the rails sites
  add_header X-Frame-Options "SAMEORIGIN";
  passenger_enabled on;
  passenger_friendly_error_pages off;
  proxy_cache hsp;

  location / {
    if (-f /var/www/brandsites/shared/config/maintenance.txt) {
        return 503;
    }
    if ($request_uri ~* ".(jpg|jpeg|gif|gz|flv|wmv|avi|css|swf|png|ico|mpeg|mpg|mp3|mp4|js)(\?v=[0-9.]+)?$") {
      expires 7d;
      access_log off;
      break;
    }
    passenger_enabled on;
    passenger_friendly_error_pages off;
  }
  location ~ ^/(assets)/ {
    root /var/www/brandsites/current/public;
    gzip_static on;
    gzip_http_version 1.0;
    expires      365d;
    add_header Cache-Control public;
    add_header   Last-Modified "";
    add_header ETag "";
    break;
  }
  location ~ ^/(system)/ {
    root /var/www/brandsites/shared;
    gzip_static on;
    gzip_http_version 1.0;
    expires      30d;
    add_header Cache-Control public;
    add_header   Last-Modified "";
    add_header ETag "";
    break;
  }

  # cn redirect to zh
  location /cn {
    rewrite ^ /zh permanent;
  }
  error_page 503 @maintenance;
  location @maintenance {
     rewrite ^(.*)$ /503.html break;
  }
  # END the block to get rid of when going live.
  ####################################################

  #
  # Add redirects below
  #
  # An example using a regexp rewrite:
  #rewrite ^/fxpedals\/fx102.*$ /en-US/products/fx102 permanent;
  #
  # An example using a "return" which is supposed to be more efficient than rewrites:
  #location ~* ^/huddle-space/? { return 301 $scheme://$http_host/en-US/product_families/amx-collaboration-systems; }
  #
  # An example using http params like ?id=something
  #location ^~ /product.php {
	#  if ($args ~ id=166) { rewrite ^ /en-US/products/omega? permanent; }
	#}
	#
	#

  # Redirects all the old product page links to the new ones. This assumes the
  # "friendly_id" on the old system matches the new system. In spot-checking, it
  # seems that they are. In cases where they aren't identical, create a redirect
  # rule case-by-case above this one:
  # TODO: some of the old URLs have parenthesis in them. We need to strip those out
  # for the new URL.
  location ~* ^/en-us\/product-details\/(.*) {
    return 301 $scheme://$http_host/en-US/products/$1;
  }
  location ~* ^/en-us\/support\/product-details\/(.*) {
    return 301 $scheme://$http_host/en-US/products/$1#documentation;
  }
}
