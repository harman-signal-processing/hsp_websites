{"version":3,"sources":["webpack:///date-range-selector.js","webpack:///webpack/bootstrap d174118c06f57b4bedd7?303c","webpack:///C:/myGitRepos/ga-dev-tools/src/javascript/embed-api/components/date-range-selector.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","gapi","analytics","ready","convertDate","str","dateFormat","test","match","nDaysAgo","exec","daysAgo","Error","numDays","date","Date","setDate","getDate","month","String","getMonth","length","day","getFullYear","createComponent","execute","options","this","get","container","document","getElementById","template","innerHTML","dateInputs","querySelectorAll","startDateInput","value","endDateInput","setValues","setMinMax","onchange","onChange","bind","emit","start-date","end-date","max","min"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA,KDMM,SAASI,EAAQD,GAqBtB,YE7CDQ,MAAKC,UAAUC,MAAM,WAWnB,QAASC,GAAYC,GAEnB,GAAIC,EAAWC,KAAKF,GAAM,MAAOA,EAEjC,IAAIG,GAAQC,EAASC,KAAKL,EAC1B,IAAIG,EACF,MAAOG,IAASH,EAAM,GACjB,IAAW,SAAPH,EACT,MAAOM,GAAQ,EACV,IAAW,aAAPN,EACT,MAAOM,GAAQ,EAEf,MAAM,IAAIC,OAAM,uBAAyBP,GAS7C,QAASM,GAAQE,GACf,GAAIC,GAAO,GAAIC,KACfD,GAAKE,QAAQF,EAAKG,UAAYJ,EAC9B,IAAIK,GAAQC,OAAOL,EAAKM,WAAa,EACrCF,GAAwB,GAAhBA,EAAMG,OAAc,IAAMH,EAAOA,CACzC,IAAII,GAAMH,OAAOL,EAAKG,UAEtB,OADAK,GAAoB,GAAdA,EAAID,OAAc,IAAMC,EAAKA,EAC5BR,EAAKS,cAAgB,IAAML,EAAQ,IAAMI,EArClD,GAAIb,GAAW,eACXH,EAAa,qBAuCjBL,MAAKC,UAAUsB,gBAAgB,qBAM7BC,QAAS,WACP,GAAIC,GAAUC,KAAKC,KACnBF,GAAQ,cAAgBA,EAAQ,eAAiB,WACjDA,EAAQ,YAAcA,EAAQ,aAAe,YAG7CC,KAAKE,UAAwC,gBAArBH,GAAQG,UAC9BC,SAASC,eAAeL,EAAQG,WAAaH,EAAQG,UAGnDH,EAAQM,WAAUL,KAAKK,SAAWN,EAAQM,UAE9CL,KAAKE,UAAUI,UAAYN,KAAKK,QAChC,IAAIE,GAAaP,KAAKE,UAAUM,iBAAiB,QAWjD,OATAR,MAAKS,eAAiBF,EAAW,GACjCP,KAAKS,eAAeC,MAAQjC,EAAYsB,EAAQ,eAChDC,KAAKW,aAAeJ,EAAW,GAC/BP,KAAKW,aAAaD,MAAQjC,EAAYsB,EAAQ,aAE9CC,KAAKY,YACLZ,KAAKa,YAELb,KAAKE,UAAUY,SAAWd,KAAKe,SAASC,KAAKhB,MACtCA,MAOTe,SAAU,WACRf,KAAKY,YACLZ,KAAKa,YACLb,KAAKiB,KAAK,UACRC,aAAclB,KAAK,cACnBmB,WAAYnB,KAAK,eAOrBY,UAAW,WACTZ,KAAK,cAAgBA,KAAKS,eAAeC,MACzCV,KAAK,YAAcA,KAAKW,aAAaD,OAMvCG,UAAW,WACTb,KAAKS,eAAeW,IAAMpB,KAAKW,aAAaD,MAC5CV,KAAKW,aAAaU,IAAMrB,KAAKS,eAAeC,OAS9CL,SACE","file":"date-range-selector.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t// Copyright 2014 Google Inc. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t//     http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t\n\t/* global gapi */\n\t\n\t/**\r\n\t * A DateRangeSelector component for the Embed API.\r\n\t */\n\t'use strict';\n\t\n\tgapi.analytics.ready(function () {\n\t\n\t  var nDaysAgo = /(\\d+)daysAgo/;\n\t  var dateFormat = /\\d{4}\\-\\d{2}\\-\\d{2}/;\n\t\n\t  /**\r\n\t   * Convert a date acceptable to the Core Reporting API (e.g. `today`,\r\n\t   * `yesterday` or `NdaysAgo`) into the format YYYY-MM-DD. Dates\r\n\t   * already in that format are simply returned.\r\n\t   * @return {string} The formatted date.\r\n\t   */\n\t  function convertDate(str) {\n\t    // If str is in the proper format, do nothing.\n\t    if (dateFormat.test(str)) return str;\n\t\n\t    var match = nDaysAgo.exec(str);\n\t    if (match) {\n\t      return daysAgo(+match[1]);\n\t    } else if (str == 'today') {\n\t      return daysAgo(0);\n\t    } else if (str == 'yesterday') {\n\t      return daysAgo(1);\n\t    } else {\n\t      throw new Error('Cannot convert date ' + str);\n\t    }\n\t  }\n\t\n\t  /**\r\n\t   * Accept a number and return a date formatted as YYYY-MM-DD that\r\n\t   * represents that many days ago.\r\n\t   * @return {string} The formatted date.\r\n\t   */\n\t  function daysAgo(numDays) {\n\t    var date = new Date();\n\t    date.setDate(date.getDate() - numDays);\n\t    var month = String(date.getMonth() + 1);\n\t    month = month.length == 1 ? '0' + month : month;\n\t    var day = String(date.getDate());\n\t    day = day.length == 1 ? '0' + day : day;\n\t    return date.getFullYear() + '-' + month + '-' + day;\n\t  }\n\t\n\t  gapi.analytics.createComponent('DateRangeSelector', {\n\t\n\t    /**\r\n\t     * Initialize the DateRangeSelector instance and render it to the page.\r\n\t     * @return {DateRangeSelector} The instance.\r\n\t     */\n\t    execute: function execute() {\n\t      var options = this.get();\n\t      options['start-date'] = options['start-date'] || '7daysAgo';\n\t      options['end-date'] = options['end-date'] || 'yesterday';\n\t\n\t      // Allow container to be a string ID or an HTMLElement.\n\t      this.container = typeof options.container == 'string' ? document.getElementById(options.container) : options.container;\n\t\n\t      // Allow the template to be overridden.\n\t      if (options.template) this.template = options.template;\n\t\n\t      this.container.innerHTML = this.template;\n\t      var dateInputs = this.container.querySelectorAll('input');\n\t\n\t      this.startDateInput = dateInputs[0];\n\t      this.startDateInput.value = convertDate(options['start-date']);\n\t      this.endDateInput = dateInputs[1];\n\t      this.endDateInput.value = convertDate(options['end-date']);\n\t\n\t      this.setValues();\n\t      this.setMinMax();\n\t\n\t      this.container.onchange = this.onChange.bind(this);\n\t      return this;\n\t    },\n\t\n\t    /**\r\n\t     * Emit a change event based on the currently selected dates.\r\n\t     * Pass an object containing the start date and end date.\r\n\t     */\n\t    onChange: function onChange() {\n\t      this.setValues();\n\t      this.setMinMax();\n\t      this.emit('change', {\n\t        'start-date': this['start-date'],\n\t        'end-date': this['end-date']\n\t      });\n\t    },\n\t\n\t    /**\r\n\t     * Updates the instance properties based on the input values.\r\n\t     */\n\t    setValues: function setValues() {\n\t      this['start-date'] = this.startDateInput.value;\n\t      this['end-date'] = this.endDateInput.value;\n\t    },\n\t\n\t    /**\r\n\t     * Updates the input min and max attributes so there's no overlap.\r\n\t     */\n\t    setMinMax: function setMinMax() {\n\t      this.startDateInput.max = this.endDateInput.value;\n\t      this.endDateInput.min = this.startDateInput.value;\n\t    },\n\t\n\t    /**\r\n\t     * The html structure used to build the component. Developers can\r\n\t     * override this by passing it to the component constructor.\r\n\t     * The only requirement is that the structure contain two inputs, the\r\n\t     * first will be the start date and the second will be the end date.\r\n\t     */\n\t    template: '<div class=\"DateRangeSelector\">' + '  <div class=\"DateRangeSelector-item\">' + '    <label>Start Date</label> ' + '    <input type=\"date\">' + '  </div>' + '  <div class=\"DateRangeSelector-item\">' + '    <label>End Date</label> ' + '    <input type=\"date\">' + '  </div>' + '</div>'\n\t  });\n\t});\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** date-range-selector.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d174118c06f57b4bedd7\n **/","// Copyright 2014 Google Inc. All rights reserved.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\n\r\n/* global gapi */\r\n\r\n/**\r\n * A DateRangeSelector component for the Embed API.\r\n */\r\ngapi.analytics.ready(function() {\r\n\r\n  var nDaysAgo = /(\\d+)daysAgo/;\r\n  var dateFormat = /\\d{4}\\-\\d{2}\\-\\d{2}/;\r\n\r\n  /**\r\n   * Convert a date acceptable to the Core Reporting API (e.g. `today`,\r\n   * `yesterday` or `NdaysAgo`) into the format YYYY-MM-DD. Dates\r\n   * already in that format are simply returned.\r\n   * @return {string} The formatted date.\r\n   */\r\n  function convertDate(str) {\r\n    // If str is in the proper format, do nothing.\r\n    if (dateFormat.test(str)) return str;\r\n\r\n    var match = nDaysAgo.exec(str);\r\n    if (match) {\r\n      return daysAgo(+match[1]);\r\n    } else if (str == 'today') {\r\n      return daysAgo(0);\r\n    } else if (str == 'yesterday') {\r\n      return daysAgo(1);\r\n    } else {\r\n      throw new Error('Cannot convert date ' + str);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Accept a number and return a date formatted as YYYY-MM-DD that\r\n   * represents that many days ago.\r\n   * @return {string} The formatted date.\r\n   */\r\n  function daysAgo(numDays) {\r\n    var date = new Date();\r\n    date.setDate(date.getDate() - numDays);\r\n    var month = String(date.getMonth() + 1);\r\n    month = month.length == 1 ? '0' + month: month;\r\n    var day = String(date.getDate());\r\n    day = day.length == 1 ? '0' + day: day;\r\n    return date.getFullYear() + '-' + month + '-' + day;\r\n  }\r\n\r\n  gapi.analytics.createComponent('DateRangeSelector', {\r\n\r\n    /**\r\n     * Initialize the DateRangeSelector instance and render it to the page.\r\n     * @return {DateRangeSelector} The instance.\r\n     */\r\n    execute: function() {\r\n      var options = this.get();\r\n      options['start-date'] = options['start-date'] || '7daysAgo';\r\n      options['end-date'] = options['end-date'] || 'yesterday';\r\n\r\n      // Allow container to be a string ID or an HTMLElement.\r\n      this.container = typeof options.container == 'string' ?\r\n        document.getElementById(options.container) : options.container;\r\n\r\n      // Allow the template to be overridden.\r\n      if (options.template) this.template = options.template;\r\n\r\n      this.container.innerHTML = this.template;\r\n      var dateInputs = this.container.querySelectorAll('input');\r\n\r\n      this.startDateInput = dateInputs[0];\r\n      this.startDateInput.value = convertDate(options['start-date']);\r\n      this.endDateInput = dateInputs[1];\r\n      this.endDateInput.value = convertDate(options['end-date']);\r\n\r\n      this.setValues();\r\n      this.setMinMax();\r\n\r\n      this.container.onchange = this.onChange.bind(this);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Emit a change event based on the currently selected dates.\r\n     * Pass an object containing the start date and end date.\r\n     */\r\n    onChange: function() {\r\n      this.setValues();\r\n      this.setMinMax();\r\n      this.emit('change', {\r\n        'start-date': this['start-date'],\r\n        'end-date': this['end-date']\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Updates the instance properties based on the input values.\r\n     */\r\n    setValues: function() {\r\n      this['start-date'] = this.startDateInput.value;\r\n      this['end-date'] = this.endDateInput.value;\r\n    },\r\n\r\n    /**\r\n     * Updates the input min and max attributes so there's no overlap.\r\n     */\r\n    setMinMax: function() {\r\n      this.startDateInput.max = this.endDateInput.value;\r\n      this.endDateInput.min = this.startDateInput.value;\r\n    },\r\n\r\n    /**\r\n     * The html structure used to build the component. Developers can\r\n     * override this by passing it to the component constructor.\r\n     * The only requirement is that the structure contain two inputs, the\r\n     * first will be the start date and the second will be the end date.\r\n     */\r\n    template:\r\n      '<div class=\"DateRangeSelector\">' +\r\n      '  <div class=\"DateRangeSelector-item\">' +\r\n      '    <label>Start Date</label> ' +\r\n      '    <input type=\"date\">' +\r\n      '  </div>' +\r\n      '  <div class=\"DateRangeSelector-item\">' +\r\n      '    <label>End Date</label> ' +\r\n      '    <input type=\"date\">' +\r\n      '  </div>' +\r\n      '</div>'\r\n  });\r\n\r\n});\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/myGitRepos/ga-dev-tools/src/javascript/embed-api/components/date-range-selector.js\n **/"],"sourceRoot":""}